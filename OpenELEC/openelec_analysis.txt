========== openelec/config/functions ==========
setup_toolchain() {
}

kernel_path() { ls -d $ROOT/$BUILD/linux-[0-9]* }
tolower(){ echo "$@" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz }
require_eglibc() { }
require_cxx() { }
xorg_drv_configure_prepend() { }

add_user() {
  # Usage: add_user "username" "password" "userid" "groupid" "description" "home" "shell"
  mkdir -p ${INSTALL}/etc
  touch ${INSTALL}/etc/passwd
  if [ -z "`grep "$1:" ${INSTALL}/etc/passwd`" ]; then
    echo "$1:x:$3:$4:$5:$6:$7" >> ${INSTALL}/etc/passwd
  fi

  touch ${INSTALL}/etc/shadow
  PASSWORD="$2"
  if [ "$PASSWORD" = "x" ]; then
    PASSWORD="*"
  fi
  if [ -z "`grep "$1:" ${INSTALL}/etc/shadow`" ]; then
    echo "$1:$PASSWORD:::::::" >> ${INSTALL}/etc/shadow
  fi
}

add_group() {
  # Usage: add_group "groupname" "groupid" ("members")
  mkdir -p ${INSTALL}/etc
  touch ${INSTALL}/etc/group
  if [ -z "`grep "$1:" ${INSTALL}/etc/group`" ]; then
    echo "$1:x:$2:$3" >> ${INSTALL}/etc/group
  fi
}

do_autoreconf() { }
strip_lto() { }
strip_linker_plugin() { }
fix_module_depends() { }
check_path() { }
check_config() { }
show_config() { }

========== openelec/config/options ==========
# set default language for buildsystem
  export LC_ALL=C

if [ -z "$PROJECT" ]; then
  PROJECT="Generic"
else
  PROJECT="$PROJECT"
fi

# determines TARGET_ARCH, if not forced by user (i386 / x86_64 / arm)
if [ -z "$ARCH" ]; then
  TARGET_ARCH="i386"
else
  TARGET_ARCH="$ARCH"
fi

ROOT=`pwd`
PROJECT_DIR="$ROOT/projects"

# include versioning
  . config/version

========== openelec/config/graphic ==========
  SDL_SUPPORT="yes"
  OPENGL_SUPPORT="yes"
  OPENGLES_SUPPORT="yes"
get_graphicdrivers() { }

========== openelec/config/path ==========
set -e
# setup initial directorys (relative to root)
  CONFIG=config
  SCRIPTS=scripts
  PACKAGES=packages
  SOURCES=sources
  BUILD_BASE=build
  TARGET=target
  ADDONS=addons

    . config/arch.$TARGET_ARCH

HOST_NAME=`$LOCAL_CC -dumpmachine`
TARGET_NAME=$(echo $TARGET_SUBARCH | sed -e "s,-,,")-openelec-linux-gnu${TARGET_ABI}

BUILD=$BUILD_BASE.$DISTRONAME-$PROJECT.$TARGET_ARCH-$OPENELEC_VERSION
TARGET_IMG=$ROOT/$TARGET
TARGET_ADDONS="$TARGET_IMG/$ADDONS/$ADDON_PATH"
ADDON_BUILD="$BUILD/$ADDONS/$1"
STAMPS_NOARCH=.stamps
STAMPS=$BUILD/.stamps
STAMPS_INSTALL=$BUILD/image/.stamps
DOCS=DOCS
TOOLCHAIN=$BUILD/toolchain
SYSROOT_PREFIX=$ROOT/$TOOLCHAIN/$TARGET_NAME/sysroot
LIB_PREFIX=$SYSROOT_PREFIX/usr
TARGET_PREFIX=$ROOT/$TOOLCHAIN/bin/$TARGET_NAME-

FAKEROOT_SCRIPT=$ROOT/.fakeroot.$PROJECT.$TARGET_ARCH

. config/sources

MAKE="$ROOT/$TOOLCHAIN/bin/make"
MAKEINSTALL="$ROOT/$TOOLCHAIN/bin/make -j1 DESTDIR=$SYSROOT_PREFIX install"
SED="sed -i"

# set package metadata
  PKG_NAME="$1"
  PKG_VERSION="0.0invalid"
  PKG_REV="0"
  PKG_ARCH="any"
  PKG_LICENSE="unknown"
  PKG_SITE=""
  PKG_URL=""
  PKG_DEPENDS=""
  PKG_BUILD_DEPENDS=""
  PKG_PRIORITY="optional"
  PKG_SECTION="misc"
  PKG_SHORTDESC="$1 (autogenerated)"
  PKG_LONGDESC=""
  PKG_IS_ADDON="no"

XORG_PATH_DRI=/usr/lib/dri
XORG_PATH_XKB=/usr/share/X11/xkb
XORG_PATH_XKB_OUTPUT=/var/lib/xkb
XORG_PATH_RGB=/usr/lib/X11/rgb
XORG_PATH_MODULES=/usr/lib/xorg/modules
XORG_PATH_DRIVERS=/usr/lib/xorg/modules/drivers

SSL_CERTIFICATES="/etc/pki/tls"

TOOLCHAIN_LANGUAGES=c

. config/optimize

========== openelec/config/path ==========


源码分析
相关目录

    源码目录及文件

projects：项目目录（Generic、Inter、Virtual……）
Makefile
scripts：编译所用脚本
config：编译使用的一些变量、函数
packages：所需的安装包信息
tools：
licenses：
.git：
.gitignore：
.gitmodules：
CHANGELOG
CONTRIBUTING.md
create_tar.sh
TODO
README.md

scripts/build
	查找包信息文件，如：packages/virtual/toolchain/package.mk

config/path：编译安装包路径、库函数路径、命令路径等
	查找包信息文件路劲，如：packages/virtual/toolchain/
	生成该包的项目路径，如：build.OpenELEC-Generic.x86_64-devel/toolchain/
	定义颜色

scripts/get 从包信息文件中获取下载信息下载安装包
	生成 .url 文件，内容为包信息文件中的 PKG_URL
	生成 .md5 加密文件：md5sum -t $PACKAGE > $MD5SUM

scripts/extract：解压安装包

scripts/unpack：解压 + 打补丁

scripts/build：解压 + 编译

scripts/image：
	检查依赖包
	编译 toolchain、squashfs、fakeroot、kmod：使用 scripts/build
	建立文件系统：创建系统相关文件夹及系统属性文件
	安装相关程序：libc gcc linux linux-drivers linux-firmware $BOOTLOADER busybox util-linux corefonts network 等（使用 scripts/install），并拷贝相应配置文件
	建立 squashfs 系统
	生成 img 文件

    编译后生成的目录

sources：下载的安装包
build.OpenELEC-Virtual.i386-devel：编译的项目目录

编译过程

PROJECT=Virtual ARCH=i386 make release
-> Makefile: ./scripts/image release
-> scripts/image: 

源码分析

    PROJECT=Virtual ARCH=i386 make release

 -> Makefile: ./scripts/image release
-> scripts/image:
	$1 -> release
	. config/options $1
		LC_ALL=C
		PROJECT="Generic"
		TARGET_ARCH="i386"
		ROOT=/home/along/source_code/OpenELEC.tv-20141006
		PROJECT_DIR="/home/along/source_code/OpenELEC.tv-20141006/projects"
		LINUX_DEPENDS="/home/along/source_code/OpenELEC.tv-20141006/projects/Generic/linux/linux.$TARGET_ARCH.conf /home/along/source_code/OpenELEC.tv-20141006/packages/linux/package.mk"
		. /home/along/source_code/OpenELEC.tv-20141006/projects/Generic/options
			DISTRONAME="OpenELEC"
			DESCRIPTION="OpenELEC is a fast and userfriendly XBMC Mediacenter distribution."
			GREETING1="# OpenELEC - The living room PC for everyone #"
			ROOT_PASSWORD="openelec"
			TARGET_CPU="x86-64"
			BOOTLOADER="syslinux"
			UBOOT_VERSION="default"
			GCC_VERSION="default"
			LINUX="default"
			SQUASHFS_COMPRESSION="gzip"
			MEDIACENTER="xbmc"
			SKINS="Confluence"
			ADDITIONAL_DRIVERS="RTL8192CU RTL8192DU RTL8188EU RTL8812AU dvbhdhomerun
			WEBSERVER="yes"
			SSHLIB_SUPPORT="yes"
			NFS_SUPPORT="yes"
		. config/graphic
		. config/path $1(release) 设置编译的项目目录结构
			SCRIPTS=scripts
	show_config 显示配置信息
	scripts/checkdeps build 检查依赖

unset 删除变量 set -e 若指令传回值不等于0，则立即退出 shell

    源码中修改初始密码

packages/sysutils/busybox/install:ROOT_PWD="`$ROOT/$TOOLCHAIN/bin/cryptpw -m sha512 $ROOT_PASSWORD`"
	config/options:ROOT=`pwd`
	config/path:TOOLCHAIN=$BUILD/toolchain
	projects/Generic/options:  ROOT_PASSWORD="openelec"

    源码中添加用户

packages/sysutils/busybox/install:add_user root "$ROOT_PWD" 0 0 "Root User" "/storage" "/bin/sh"

    默认显示的主机名

projects/Generic/options:    DISTRONAME="OpenELEC"

Makefile
 |-> scripts/image
 ||-> scripts/checkdeps build
 ||-> scripts/build: toolchain squashfs:host fakeroot:host kmod:host
 |||-> scripts/unpack
 ||||-> scripts/get: download package to source folder
 ||||-> * pre_unpack(), unpack()
 ||||-> scripts/extract: extract from package
 ||||-> * post_unpack(), pre_patch(), post_patch() -> package.mk
 |||-> * setup_toolchain()
 |||-> * config build options
 |||-> * build depends
 |||-> scripts/autoreconf
 |||-> * setup configure script
 |||-> * virtual packages dont must be build, they only contains dependencies
 |||-> * pre_build_target/host/init/bootstrap()
 |||-> * pre_configure_target/host/init/bootstrap()
 |||-> * PKG_CONFIGURE_SCRIPT="$ROOT/$PKG_BUILD/configure
 |||-> * post_configure_target/host/init/bootstrap()
 |||-> * pre_make_
 |||-> * make
 |||-> * post_make_
 |||-> * pre_makeinstall_
 |||-> * makeinstall_
 |||-> * $STRIP
 ||-> * setup version, name
 ||-> * setup fakeroot
 ||-> * clean old install dirs: SYSTEM etc
 ||-> * create baselayout: /bin, /etc/release, etc
 ||-> * create /etc/os-release
 ||-> * create /etc/issue
 ||-> * create Basissystem
 |||-> scripts/install: libc gcc linux linux-drivers linux-firmware $BOOTLOADER busybox util-linux corefonts network
 ||||-> scripts/build
 ||||-> scripts/install depends
 ||||-> * pre_install()
 ||||-> * post_install()
 ||-> * Graphic support, Sound support, Multimedia support, Automounter support, NTFS 3G support, NTFS 3G support, Remote support, LCD support, Sensors support, Installer support, Devtools, OEM packages
 |||-> scripts/install: DISPLAYSERVER, mediacenter, alsa, udevil, fuse-exfat, ntfs-3g_ntfsprogs, remote, lcdproc, lm_sensors, installer, testing+debug, oem
 ||-> * copy project related files to filesystem
 ||-> * run depmod
 |||-> * $ROOT/$TOOLCHAIN/bin/depmod
 ||-> * strip kernel modules
 |||-> * $STRIP
 ||-> * make target dir
 ||-> * copy kernel to target dir
 ||-> * create squashfs file
 ||-> * run fakeroot
 ||-> * set permissions
 |||-> * cleanup
 ||||-> * create release dir
 |||||-> * remove n previous created release image
 |||-> * create md5sum's
 |||-> * create target directory
 |||-> * remove an previous created release tarball
 |||-> * create release tarball
 |||-> * create image files if requested
 ||||-> * variables used in image script must be passed
 |||-> * cleanup release dir
 |||-> * cleanup
 |||-> * create release dir
 |||-> * create System dir
 ||||-> * copy Bootloader
 ||||-> * copy system files
 ||||-> * create md5sum's
 ||||-> * copy additional files
 |||-> * create Storage dir
 |||-> * remove an previous created release tarball
 |||-> * create filesystem tarballs
 |||-> * remove an filesystem dirs
 |||-> * remove an previous created release tarball
 |||-> * create release tarball
 |||-> * cleanup release dir

https://github.com/taxigps/xbmc-addons-chinese
http://xbmc-addons-chinese.googlecode.com/svn/addons/dharma_src/
http://xbmc-addons-chinese.googlecode.com/svn/addons/eden_src/

Addons:
	xbmc-addons-chinese
		script.skinfont
	XBMC.org Add-ons
		skin.pm3-hd
